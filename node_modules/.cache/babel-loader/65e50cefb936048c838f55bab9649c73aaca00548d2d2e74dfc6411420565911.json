{"ast":null,"code":"var _jsxFileName = \"/Users/adlyazim/Documents/GitHub/ENTI674-Team3-FinalProject/client/src/components/WeatherWidget.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../styles/main.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WeatherWidget = () => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchWeather = async () => {\n      try {\n        const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\n        const city = 'Toronto'; // You can make this dynamic based on user location\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`);\n        const data = await response.json();\n        setWeather({\n          temperature: Math.round(data.main.temp),\n          condition: data.weather[0].main,\n          icon: `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`\n        });\n      } catch (error) {\n        console.error('Error fetching weather:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchWeather();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: \"Loading weather...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  }\n  if (!weather) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: \"Unable to load weather data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-widget\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: weather.icon,\n        alt: weather.condition,\n        className: \"weather-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weather-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"temperature\",\n          children: [weather.temperature, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"condition\",\n          children: weather.condition\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherWidget, \"8S9MM6CRsAKHmMjrPFeKJiV0PfY=\");\n_c = WeatherWidget;\nvar _c;\n$RefreshReg$(_c, \"WeatherWidget\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","WeatherWidget","_s","weather","setWeather","loading","setLoading","fetchWeather","apiKey","process","env","REACT_APP_OPENWEATHER_API_KEY","city","response","fetch","data","json","temperature","Math","round","main","temp","condition","icon","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["/Users/adlyazim/Documents/GitHub/ENTI674-Team3-FinalProject/client/src/components/WeatherWidget.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { format } from 'date-fns';\nimport '../styles/main.css';\n\ninterface WeatherData {\n  temperature: number;\n  condition: string;\n  icon: string;\n}\n\nexport const WeatherWidget: React.FC = () => {\n  const [weather, setWeather] = useState<WeatherData | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchWeather = async () => {\n      try {\n        const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;\n        const city = 'Toronto'; // You can make this dynamic based on user location\n        const response = await fetch(\n          `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`\n        );\n        const data = await response.json();\n        \n        setWeather({\n          temperature: Math.round(data.main.temp),\n          condition: data.weather[0].main,\n          icon: `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`\n        });\n      } catch (error) {\n        console.error('Error fetching weather:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchWeather();\n  }, []);\n\n  if (loading) {\n    return <div className=\"text-center\">Loading weather...</div>;\n  }\n\n  if (!weather) {\n    return <div className=\"text-center\">Unable to load weather data</div>;\n  }\n\n  return (\n    <div className=\"weather-widget\">\n      <div className=\"weather-info\">\n        <img src={weather.icon} alt={weather.condition} className=\"weather-icon\" />\n        <div className=\"weather-details\">\n          <p className=\"temperature\">{weather.temperature}Â°C</p>\n          <p className=\"condition\">{weather.condition}</p>\n        </div>\n      </div>\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}